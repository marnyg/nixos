name: CI
on:
  push:
    branches:
      - master
    tags:
      - 'v*' # Also trigger on version tags
  pull_request: {}
  workflow_call:
    outputs:
      wsl_artifact_name:
        description: "Name of the WSL tarball artifact"
        value: ${{ jobs.build.outputs.wsl_artifact_name }}
      desktop_artifact_name:
        description: "Name of the Desktop tarball artifact"
        value: ${{ jobs.build.outputs.desktop_artifact_name }}
jobs:
  build:
    name: Build üõ†Ô∏è
    runs-on: ubuntu-latest
    outputs:
      wsl_artifact_name: ${{ steps.upload_wsl.outputs.artifact-name }}
      desktop_artifact_name: ${{ steps.upload_desktop.outputs.artifact-name }}
    permissions:
      contents: read # To checkout
      # id-token: write # If using Cachix with OIDC
      packages: write # If using GitHub Packages as a Nix binary cache
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for git describe if not using `needs.prepare` for version
      - name: Install nix ‚ùÑÔ∏è
        uses: cachix/install-nix-action@6a9a9e84a173d90b3ffb42c5ddaf9ea033fad011 # v23
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes
      - name: Set version üè∑Ô∏è
        id: version_info
        run: |
          if [ -z "${APP_VERSION}" ]; then
            if [[ "${{ github.ref_type }}" == "tag" ]]; then
              APP_VERSION="${{ github.ref_name }}"
            else
              APP_VERSION="dev-$(git rev-parse --short HEAD)"
            fi
            echo "Derived version: $APP_VERSION"
          fi

          echo "app_version=${APP_VERSION}" >> $GITHUB_OUTPUT
          echo "${APP_VERSION}" > ./VERSION
          echo "Commit: $(git rev-parse HEAD)" >> ./VERSION
          echo "Full version string for artifacts/display: ${APP_VERSION}"
      - name: Summary Headline üìù
        run: echo '## NixOS-WSL Build (${{ steps.version_info.outputs.app_version }})' >> $GITHUB_STEP_SUMMARY
      - name: Build WSL Tarball üõ†Ô∏è
        id: build_wsl
        run: |
          echo "Building WSL tarball..."
          nix build ".#nixosConfigurations.wsl.config.system.build.tarballBuilder" -L -o result-wsl-tarball
          echo "WSL tarball built: $(readlink -f result-wsl-tarball)"
          # The output 'result-wsl-tarball' is a symlink to the actual tarball in the Nix store.
      - name: Upload WSL Tarball üì§
        id: upload_wsl
        uses: actions/upload-artifact@v4
        with:
          name: nixos-wsl-${{ steps.version_info.outputs.app_version }}
          path: result-wsl-tarball # upload-artifact will follow the symlink
          if-no-files-found: error
          # retention-days: 7 # Adjust as needed
    # - name: Build Desktop Tarball üõ†Ô∏è
    #   id: build_desktop
    #   run: |
    #     echo "Building Desktop tarball..."
    #     nix build ".#nixosConfigurations.desktop.config.system.build.tarballBuilder" -L -o result-desktop-tarball
    #     echo "Desktop tarball built: $(readlink -f result-desktop-tarball)"
    #     # The output 'result-desktop-tarball' is a symlink to the actual tarball in the Nix store.
    # - name: Upload Desktop Tarball üì§
    #   id: upload_desktop
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: nixos-desktop-${{ steps.version_info.outputs.app_version }}
    #     path: result-desktop-tarball # upload-artifact will follow the symlink
    #     if-no-files-found: error
    #     retention-days: 7 # Adjust as needed
